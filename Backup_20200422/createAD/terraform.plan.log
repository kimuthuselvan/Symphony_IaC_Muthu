[0m[1mRefreshing Terraform state in-memory prior to plan...[0m
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.
[0m

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  [32m+[0m create
 [36m<=[0m read (data resources)
[0m
Terraform will perform the following actions:

[1m  # data.template_file.win-server[0m will be read during apply
  # (config refers to values not yet known)[0m[0m
[0m [36m<=[0m[0m data "template_file" "win-server"  {
      [32m+[0m [0m[1m[0mid[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mrendered[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mtemplate[0m[0m = <<~EOT
            <powershell>
            
            Set-ExecutionPolicy Bypass -Force;
            Set-DnsClientServerAddress -interfacealias Ethernet* -serveraddresses ("${dns1}")
            
            </powershell>
        EOT
      [32m+[0m [0m[1m[0mvars[0m[0m     = {
          [32m+[0m [0m"dns1" = (known after apply)
        }
    }

[1m  # aws_directory_service_directory.my_simplead[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_directory_service_directory" "my_simplead" {
      [32m+[0m [0m[1m[0maccess_url[0m[0m        = (known after apply)
      [32m+[0m [0m[1m[0malias[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mdns_ip_addresses[0m[0m  = (known after apply)
      [32m+[0m [0m[1m[0medition[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0menable_sso[0m[0m        = false
      [32m+[0m [0m[1m[0mid[0m[0m                = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m              = "symphonymain.local"
      [32m+[0m [0m[1m[0mpassword[0m[0m          = (sensitive value)
      [32m+[0m [0m[1m[0msecurity_group_id[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mshort_name[0m[0m        = "symphonymain"
      [32m+[0m [0m[1m[0msize[0m[0m              = "Small"
      [32m+[0m [0m[1m[0mtype[0m[0m              = "SimpleAD"

      [32m+[0m [0mvpc_settings {
          [32m+[0m [0m[1m[0msubnet_ids[0m[0m = [
              [32m+[0m [0m"subnet-0b89a4615bf0fc2b7",
              [32m+[0m [0m"subnet-0c2bbd3fc6aa29e0d",
            ]
          [32m+[0m [0m[1m[0mvpc_id[0m[0m     = "vpc-0b2eba5d72c599770"
        }
    }

[1m  # aws_iam_instance_profile.ec2-ssm-role-profile[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_instance_profile" "ec2-ssm-role-profile" {
      [32m+[0m [0m[1m[0marn[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mcreate_date[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m        = "samba-domain-role-profile"
      [32m+[0m [0m[1m[0mpath[0m[0m        = "/"
      [32m+[0m [0m[1m[0mrole[0m[0m        = "samba-domain-role"
      [32m+[0m [0m[1m[0mroles[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0munique_id[0m[0m   = (known after apply)
    }

[1m  # aws_iam_instance_profile.instance_profile_adwriter[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_instance_profile" "instance_profile_adwriter" {
      [32m+[0m [0m[1m[0marn[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mcreate_date[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m        = "INSTANCE_PROFILE_ADWRITER"
      [32m+[0m [0m[1m[0mpath[0m[0m        = "/"
      [32m+[0m [0m[1m[0mrole[0m[0m        = "IAM_ROLE_ADWRITER"
      [32m+[0m [0m[1m[0mroles[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0munique_id[0m[0m   = (known after apply)
    }

[1m  # aws_iam_policy.ec2-ssm-policy[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_policy" "ec2-ssm-policy" {
      [32m+[0m [0m[1m[0marn[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mdescription[0m[0m = "Policy required by ssm to join domain"
      [32m+[0m [0m[1m[0mid[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m        = "samba-domain-policy"
      [32m+[0m [0m[1m[0mpath[0m[0m        = "/"
      [32m+[0m [0m[1m[0mpolicy[0m[0m      = jsonencode(
            {
              [32m+[0m [0mStatement = [
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"ssm:GetDeployablePatchSnapshotForInstance",
                          [32m+[0m [0m"ssm:GetParameters",
                          [32m+[0m [0m"ssm:ListInstanceAssociations",
                          [32m+[0m [0m"ssm:PutInventory",
                          [32m+[0m [0m"ssm:UpdateInstanceAssociationStatus",
                          [32m+[0m [0m"ssm:DescribeAssociation",
                          [32m+[0m [0m"ssm:GetDocument",
                          [32m+[0m [0m"ssm:ListAssociations",
                          [32m+[0m [0m"ssm:UpdateAssociationStatus",
                          [32m+[0m [0m"ssm:UpdateInstanceInformation",
                          [32m+[0m [0m"ssm:CreateAssociation",
                          [32m+[0m [0m"ssm:DeleteAssociation",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"ssmmessages:CreateControlChannel",
                          [32m+[0m [0m"ssmmessages:CreateDataChannel",
                          [32m+[0m [0m"ssmmessages:OpenControlChannel",
                          [32m+[0m [0m"ssmmessages:OpenDataChannel",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"ec2messages:AcknowledgeMessage",
                          [32m+[0m [0m"ec2messages:DeleteMessage",
                          [32m+[0m [0m"ec2messages:FailMessage",
                          [32m+[0m [0m"ec2messages:GetEndpoint",
                          [32m+[0m [0m"ec2messages:GetMessages",
                          [32m+[0m [0m"ec2messages:SendReply",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"cloudwatch:PutMetricData",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"ec2:Describe*",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"ds:CreateComputer",
                          [32m+[0m [0m"ds:DescribeDirectories",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"logs:CreateLogGroup",
                          [32m+[0m [0m"logs:CreateLogStream",
                          [32m+[0m [0m"logs:DescribeLogGroups",
                          [32m+[0m [0m"logs:DescribeLogStreams",
                          [32m+[0m [0m"logs:PutLogEvents",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"s3:PutObject",
                          [32m+[0m [0m"s3:GetObject",
                          [32m+[0m [0m"s3:GetEncryptionConfiguration",
                          [32m+[0m [0m"s3:AbortMultipartUpload",
                          [32m+[0m [0m"s3:ListMultipartUploadParts",
                          [32m+[0m [0m"s3:ListBucketMultipartUploads",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "*"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"s3:ListBucket",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = "arn:aws:s3:::amazon-ssm-packages-*"
                    },
                ]
              [32m+[0m [0mVersion   = "2012-10-17"
            }
        )
    }

[1m  # aws_iam_role.ec2-ssm-role[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_role" "ec2-ssm-role" {
      [32m+[0m [0m[1m[0marn[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0massume_role_policy[0m[0m    = jsonencode(
            {
              [32m+[0m [0mStatement = [
                  [32m+[0m [0m{
                      [32m+[0m [0mAction    = "sts:AssumeRole"
                      [32m+[0m [0mEffect    = "Allow"
                      [32m+[0m [0mPrincipal = {
                          [32m+[0m [0mService = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m [0mVersion   = "2012-10-17"
            }
        )
      [32m+[0m [0m[1m[0mcreate_date[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mforce_detach_policies[0m[0m = false
      [32m+[0m [0m[1m[0mid[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0mmax_session_duration[0m[0m  = 3600
      [32m+[0m [0m[1m[0mname[0m[0m                  = "samba-domain-role"
      [32m+[0m [0m[1m[0mpath[0m[0m                  = "/"
      [32m+[0m [0m[1m[0munique_id[0m[0m             = (known after apply)
    }

[1m  # aws_iam_role.iam_role_adwriter[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_role" "iam_role_adwriter" {
      [32m+[0m [0m[1m[0marn[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0massume_role_policy[0m[0m    = jsonencode(
            {
              [32m+[0m [0mStatement = [
                  [32m+[0m [0m{
                      [32m+[0m [0mAction    = "sts:AssumeRole"
                      [32m+[0m [0mEffect    = "Allow"
                      [32m+[0m [0mPrincipal = {
                          [32m+[0m [0mService = "ec2.amazonaws.com"
                        }
                      [32m+[0m [0mSid       = ""
                    },
                ]
              [32m+[0m [0mVersion   = "2012-10-17"
            }
        )
      [32m+[0m [0m[1m[0mcreate_date[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mforce_detach_policies[0m[0m = false
      [32m+[0m [0m[1m[0mid[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0mmax_session_duration[0m[0m  = 3600
      [32m+[0m [0m[1m[0mname[0m[0m                  = "IAM_ROLE_ADWRITER"
      [32m+[0m [0m[1m[0mpath[0m[0m                  = "/"
      [32m+[0m [0m[1m[0munique_id[0m[0m             = (known after apply)
    }

[1m  # aws_iam_role_policy.policy_allow_all_ssm[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "policy_allow_all_ssm" {
      [32m+[0m [0m[1m[0mid[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m   = "IAM_POLICY_ALLOW_ALL_SSM"
      [32m+[0m [0m[1m[0mpolicy[0m[0m = jsonencode(
            {
              [32m+[0m [0mStatement = [
                  [32m+[0m [0m{
                      [32m+[0m [0mAction   = [
                          [32m+[0m [0m"ssm:DescribeAssociation",
                          [32m+[0m [0m"ssm:ListAssociations",
                          [32m+[0m [0m"ssm:GetDocument",
                          [32m+[0m [0m"ssm:ListInstanceAssociations",
                          [32m+[0m [0m"ssm:UpdateAssociationStatus",
                          [32m+[0m [0m"ssm:UpdateInstanceInformation",
                          [32m+[0m [0m"ec2messages:AcknowledgeMessage",
                          [32m+[0m [0m"ec2messages:DeleteMessage",
                          [32m+[0m [0m"ec2messages:FailMessage",
                          [32m+[0m [0m"ec2messages:GetEndpoint",
                          [32m+[0m [0m"ec2messages:GetMessages",
                          [32m+[0m [0m"ec2messages:SendReply",
                          [32m+[0m [0m"ds:CreateComputer",
                          [32m+[0m [0m"ds:DescribeDirectories",
                          [32m+[0m [0m"ec2:DescribeInstanceStatus",
                        ]
                      [32m+[0m [0mEffect   = "Allow"
                      [32m+[0m [0mResource = [
                          [32m+[0m [0m"*",
                        ]
                      [32m+[0m [0mSid      = "AllowAccessToSSM"
                    },
                ]
              [32m+[0m [0mVersion   = "2012-10-17"
            }
        )
      [32m+[0m [0m[1m[0mrole[0m[0m   = (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.ec2-ssm-role-policy[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ec2-ssm-role-policy" {
      [32m+[0m [0m[1m[0mid[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mpolicy_arn[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mrole[0m[0m       = (known after apply)
    }

[1m  # aws_instance.vm_adwriter[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_instance" "vm_adwriter" {
      [32m+[0m [0m[1m[0mami[0m[0m                          = "ami-00cb4c0d60b9476f4"
      [32m+[0m [0m[1m[0marn[0m[0m                          = (known after apply)
      [32m+[0m [0m[1m[0massociate_public_ip_address[0m[0m  = (known after apply)
      [32m+[0m [0m[1m[0mavailability_zone[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0mcpu_core_count[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mcpu_threads_per_core[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mdisable_api_termination[0m[0m      = false
      [32m+[0m [0m[1m[0mget_password_data[0m[0m            = false
      [32m+[0m [0m[1m[0mhost_id[0m[0m                      = (known after apply)
      [32m+[0m [0m[1m[0miam_instance_profile[0m[0m         = "INSTANCE_PROFILE_ADWRITER"
      [32m+[0m [0m[1m[0mid[0m[0m                           = (known after apply)
      [32m+[0m [0m[1m[0minstance_state[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0minstance_type[0m[0m                = "t2.micro"
      [32m+[0m [0m[1m[0mipv6_address_count[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mipv6_addresses[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mkey_name[0m[0m                     = "symphony_main_domain_local"
      [32m+[0m [0m[1m[0mnetwork_interface_id[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mpassword_data[0m[0m                = (known after apply)
      [32m+[0m [0m[1m[0mplacement_group[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mprimary_network_interface_id[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mprivate_dns[0m[0m                  = (known after apply)
      [32m+[0m [0m[1m[0mprivate_ip[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0mpublic_dns[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0mpublic_ip[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0msecurity_groups[0m[0m              = [
          [32m+[0m [0m"sg-04b4c593629f2e84c",
        ]
      [32m+[0m [0m[1m[0msource_dest_check[0m[0m            = true
      [32m+[0m [0m[1m[0msubnet_id[0m[0m                    = "subnet-0c2bbd3fc6aa29e0d"
      [32m+[0m [0m[1m[0mtenancy[0m[0m                      = (known after apply)
      [32m+[0m [0m[1m[0muser_data[0m[0m                    = (known after apply)
      [32m+[0m [0m[1m[0mvolume_tags[0m[0m                  = (known after apply)
      [32m+[0m [0m[1m[0mvpc_security_group_ids[0m[0m       = (known after apply)

      [32m+[0m [0mebs_block_device {
          [32m+[0m [0m[1m[0mdelete_on_termination[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mdevice_name[0m[0m           = (known after apply)
          [32m+[0m [0m[1m[0mencrypted[0m[0m             = (known after apply)
          [32m+[0m [0m[1m[0miops[0m[0m                  = (known after apply)
          [32m+[0m [0m[1m[0mkms_key_id[0m[0m            = (known after apply)
          [32m+[0m [0m[1m[0msnapshot_id[0m[0m           = (known after apply)
          [32m+[0m [0m[1m[0mvolume_id[0m[0m             = (known after apply)
          [32m+[0m [0m[1m[0mvolume_size[0m[0m           = (known after apply)
          [32m+[0m [0m[1m[0mvolume_type[0m[0m           = (known after apply)
        }

      [32m+[0m [0mephemeral_block_device {
          [32m+[0m [0m[1m[0mdevice_name[0m[0m  = (known after apply)
          [32m+[0m [0m[1m[0mno_device[0m[0m    = (known after apply)
          [32m+[0m [0m[1m[0mvirtual_name[0m[0m = (known after apply)
        }

      [32m+[0m [0mnetwork_interface {
          [32m+[0m [0m[1m[0mdelete_on_termination[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mdevice_index[0m[0m          = (known after apply)
          [32m+[0m [0m[1m[0mnetwork_interface_id[0m[0m  = (known after apply)
        }

      [32m+[0m [0mroot_block_device {
          [32m+[0m [0m[1m[0mdelete_on_termination[0m[0m = true
          [32m+[0m [0m[1m[0mencrypted[0m[0m             = (known after apply)
          [32m+[0m [0m[1m[0miops[0m[0m                  = (known after apply)
          [32m+[0m [0m[1m[0mkms_key_id[0m[0m            = (known after apply)
          [32m+[0m [0m[1m[0mvolume_id[0m[0m             = (known after apply)
          [32m+[0m [0m[1m[0mvolume_size[0m[0m           = 30
          [32m+[0m [0m[1m[0mvolume_type[0m[0m           = "gp2"
        }
    }

[1m  # aws_ssm_association.myapp_adwriter[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_ssm_association" "myapp_adwriter" {
      [32m+[0m [0m[1m[0massociation_id[0m[0m   = (known after apply)
      [32m+[0m [0m[1m[0mdocument_version[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0minstance_id[0m[0m      = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m             = "symphonymain-ssm-document"
      [32m+[0m [0m[1m[0mparameters[0m[0m       = (known after apply)

      [32m+[0m [0mtargets {
          [32m+[0m [0m[1m[0mkey[0m[0m    = (known after apply)
          [32m+[0m [0m[1m[0mvalues[0m[0m = (known after apply)
        }
    }

[1m  # aws_ssm_document.myapp_dir_default_doc[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "aws_ssm_document" "myapp_dir_default_doc" {
      [32m+[0m [0m[1m[0marn[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mcontent[0m[0m         = (known after apply)
      [32m+[0m [0m[1m[0mcreated_date[0m[0m    = (known after apply)
      [32m+[0m [0m[1m[0mdefault_version[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mdescription[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mdocument_format[0m[0m = "JSON"
      [32m+[0m [0m[1m[0mdocument_type[0m[0m   = "Command"
      [32m+[0m [0m[1m[0mhash[0m[0m            = (known after apply)
      [32m+[0m [0m[1m[0mhash_type[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mlatest_version[0m[0m  = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m            = "symphonymain-ssm-document"
      [32m+[0m [0m[1m[0mowner[0m[0m           = (known after apply)
      [32m+[0m [0m[1m[0mparameter[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mplatform_types[0m[0m  = (known after apply)
      [32m+[0m [0m[1m[0mschema_version[0m[0m  = (known after apply)
      [32m+[0m [0m[1m[0mstatus[0m[0m          = (known after apply)
    }

[0m[1mPlan:[0m 11 to add, 0 to change, 0 to destroy.[0m

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

