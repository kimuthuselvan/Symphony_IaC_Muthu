[0m[1mRefreshing Terraform state in-memory prior to plan...[0m
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.
[0m
[0m[1maws_iam_role.static_lb_lambda: Refreshing state... [id=lambdaFunction-NLB-to-ALB-role][0m
[0m[1maws_cloudwatch_event_rule.cron_minute: Refreshing state... [id=cron-minute-lambda][0m
[0m[1maws_s3_bucket.static_lb: Refreshing state... [id=kan-sym-nlb][0m
[0m[1maws_iam_role_policy.static_lb_lambda: Refreshing state... [id=lambdaFunction-NLB-to-ALB-role:lambdaFunction-NLB-to-ALB-policy][0m

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  [33m~[0m update in-place
[0m
Terraform will perform the following actions:

[1m  # aws_iam_role_policy.static_lb_lambda[0m will be updated in-place[0m[0m
[0m  [33m~[0m[0m resource "aws_iam_role_policy" "static_lb_lambda" {
        [1m[0mid[0m[0m     = "lambdaFunction-NLB-to-ALB-role:lambdaFunction-NLB-to-ALB-policy"
        [1m[0mname[0m[0m   = "lambdaFunction-NLB-to-ALB-policy"
      [33m~[0m [0m[1m[0mpolicy[0m[0m = jsonencode(
          [33m~[0m [0m{
              [33m~[0m [0mStatement = [
                    {
                        Action   = [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                        ]
                        Effect   = "Allow"
                        Resource = [
                            "arn:aws:logs:*:*:*",
                        ]
                        Sid      = "LambdaLogging"
                    },
                  [33m~[0m [0m{
                        Action   = [
                            "s3:GetObject",
                            "s3:PutObject",
                        ]
                        Effect   = "Allow"
                      [33m~[0m [0mResource = [
                          [31m-[0m [0m"*",
                        ] [33m->[0m [0m"*"
                        Sid      = "S3"
                    },
                  [33m~[0m [0m{
                        Action   = [
                            "elasticloadbalancing:RegisterTargets",
                            "elasticloadbalancing:DeregisterTargets",
                        ]
                        Effect   = "Allow"
                      [33m~[0m [0mResource = [
                          [31m-[0m [0m"*",
                          [31m-[0m [0m"*",
                        ] [33m->[0m [0m"*"
                        Sid      = "ChangeTargetGroups"
                    },
                    {
                        Action   = [
                            "elasticloadbalancing:DescribeTargetHealth",
                        ]
                        Effect   = "Allow"
                        Resource = "*"
                        Sid      = "DescribeTargetGroups"
                    },
                    {
                        Action   = [
                            "cloudwatch:putMetricData",
                        ]
                        Effect   = "Allow"
                        Resource = "*"
                        Sid      = "CloudWatch"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        [1m[0mrole[0m[0m   = "lambdaFunction-NLB-to-ALB-role"
    }

[0m[1mPlan:[0m 0 to add, 1 to change, 0 to destroy.[0m

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

