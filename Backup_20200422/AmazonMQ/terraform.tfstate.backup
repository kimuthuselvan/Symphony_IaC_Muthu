{
  "version": 4,
  "terraform_version": "0.12.18",
  "serial": 2,
  "lineage": "e52551e4-f5b0-d032-f90d-ab164d950c83",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_mq_configuration",
      "name": "amazonmq",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:mq:us-east-1:945116902499:configuration:c-27f88007-a62f-4053-81e6-79bc1fd68aff",
            "data": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e\n\u003cbroker schedulePeriodForDestinationPurge=\"10000\" xmlns=\"http://activemq.apache.org/schema/core\"\u003e\n  \u003c!--\n  A configuration contains all of the settings for your ActiveMQ broker, in XML format (similar to ActiveMQ's activemq.xml file).\n  You can create a configuration before creating any brokers. You can then apply the configuration to one or more brokers.\n\n  You can use additional attributes for the broker element above. These attributes allow you to configure broker-wide settings.\n\n  For more information, see Configuration and Amazon MQ Broker Configuration Parameters in the Amazon MQ Developer Guide:\n  https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html\n  --\u003e\n  \u003c!--\n  Mirrored queues let you send a copy of each message to a topic with a similar name automatically.\n  For more information, see http://activemq.apache.org/mirrored-queues.html\n\n  Virtual destinations let you configure advanced routing of messages between destinations.\n  For more information, see http://activemq.apache.org/virtual-destinations.html\n  --\u003e\n  \u003c!--\n  \u003cdestinationInterceptors\u003e\n    \u003cmirroredQueue copyMessage=\"true\" postfix=\".qmirror\" prefix=\"\"/\u003e\n    \u003cvirtualDestinationInterceptor\u003e\n      \u003cvirtualDestinations\u003e\n        \u003cvirtualTopic name=\"\u0026gt;\" prefix=\"VirtualTopicConsumers.*.\" selectorAware=\"false\"/\u003e\n        \u003ccompositeQueue name=\"MY.QUEUE\"\u003e\n          \u003cforwardTo\u003e\n            \u003cqueue physicalName=\"FOO\"/\u003e\n            \u003ctopic physicalName=\"BAR\"/\u003e\n          \u003c/forwardTo\u003e\n        \u003c/compositeQueue\u003e\n      \u003c/virtualDestinations\u003e\n    \u003c/virtualDestinationInterceptor\u003e\n  \u003c/destinationInterceptors\u003e\n  --\u003e\n  \u003c!--\n  By default, Amazon MQ optimizes for queues with fast consumers:\n  Consumers are considered fast if they are able to keep up with the rate of messages generated by producers.\n  Consumers are considered slow if a queue builds up a backlog of unacknowledged messages, potentially causing a decrease in producer throughput.\n  To instruct Amazon MQ to optimize for queues with slow consumers, set the concurrentStoreAndDispatchQueues attribute to false.\n  For more information, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/ensuring-effective-amazon-mq-performance.html\n  --\u003e\n  \u003c!--\n  \u003cpersistenceAdapter\u003e\n    \u003ckahaDB  concurrentStoreAndDispatchQueues=\"false\"/\u003e\n  \u003c/persistenceAdapter\u003e\n  --\u003e\n  \u003cdestinationPolicy\u003e\n    \u003cpolicyMap\u003e\n      \u003cpolicyEntries\u003e\n        \u003c!--\n        gcInactiveDestinations is used to automatically purge inactive destinations\n        preventing them from unnecessarily using broker resources.\n\n        An 'inactive' destination is one that has no messages pending and no consumers connected.\n\n        For more information, see: http://activemq.apache.org/delete-inactive-destinations.html\n        --\u003e\n        \u003cpolicyEntry gcInactiveDestinations=\"true\" inactiveTimoutBeforeGC=\"600000\" topic=\"\u0026gt;\"\u003e\n          \u003c!--\n          The constantPendingMessageLimitStrategy is used to prevent\n          slow topic consumers to block producers and affect other consumers\n          by limiting the number of messages that are retained\n\n          For more information, see: http://activemq.apache.org/slow-consumer-handling.html\n          --\u003e\n          \u003cpendingMessageLimitStrategy\u003e\n            \u003cconstantPendingMessageLimitStrategy limit=\"1000\"/\u003e\n          \u003c/pendingMessageLimitStrategy\u003e\n        \u003c/policyEntry\u003e\n        \u003cpolicyEntry gcInactiveDestinations=\"true\" inactiveTimoutBeforeGC=\"600000\" queue=\"\u0026gt;\"/\u003e\n        \u003c!--\n        Destination policies let you configure a rich set of behaviors for your queues and topics.\n        For more information, see http://activemq.apache.org/per-destination-policies.html\n        --\u003e\n        \u003c!--\n        \u003cpolicyEntry topic=\"FOO.\u0026gt;\"\u003e\n          \u003cdispatchPolicy\u003e\n            \u003croundRobinDispatchPolicy/\u003e\n          \u003c/dispatchPolicy\u003e\n          \u003csubscriptionRecoveryPolicy\u003e\n            \u003clastImageSubscriptionRecoveryPolicy/\u003e\n          \u003c/subscriptionRecoveryPolicy\u003e\n        \u003c/policyEntry\u003e\n        \u003cpolicyEntry advisoryForConsumed=\"true\" tempTopic=\"true\"/\u003e\n        \u003cpolicyEntry advisoryForConsumed=\"true\" tempQueue=\"true\"/\u003e\n        --\u003e\n      \u003c/policyEntries\u003e\n    \u003c/policyMap\u003e\n  \u003c/destinationPolicy\u003e\n  \u003c!--\n  Typically, destinations are created automatically when they are used. Amazon MQ lets you create destinations when the broker is started.\n  For more information, see http://activemq.apache.org/configure-startup-destinations.html\n  --\u003e\n  \u003c!--\n  \u003cdestinations\u003e\n    \u003cqueue physicalName=\"FOO.BAR\"/\u003e\n    \u003ctopic physicalName=\"SOME.TOPIC\"/\u003e\n  \u003c/destinations\u003e\n  --\u003e\n  \u003c!--\n  You can control advanced ActiveMQ features using plugins.\n  --\u003e\n  \u003cplugins\u003e\n    \u003c!--\n    The Authorization plugin allows you to control the groups of users that are allowed to perform certain operations on your destinations.\n    For more information, see http://activemq.apache.org/security.html\n    --\u003e\n    \u003c!--\n    \u003cauthorizationPlugin\u003e\n      \u003cmap\u003e\n        \u003cauthorizationMap\u003e\n          \u003cauthorizationEntries\u003e\n            \u003cauthorizationEntry admin=\"guests,users\" queue=\"GUEST.\u0026gt;\" read=\"guests\" write=\"guests,users\"/\u003e\n            \u003cauthorizationEntry admin=\"guests,users\" read=\"guests,users\" topic=\"ActiveMQ.Advisory.\u0026gt;\" write=\"guests,users\"/\u003e\n          \u003c/authorizationEntries\u003e\n          \u003ctempDestinationAuthorizationEntry\u003e\n            \u003ctempDestinationAuthorizationEntry admin=\"tempDestinationAdmins\" read=\"tempDestinationAdmins\" write=\"tempDestinationAdmins\"/\u003e\n          \u003c/tempDestinationAuthorizationEntry\u003e\n        \u003c/authorizationMap\u003e\n      \u003c/map\u003e\n    \u003c/authorizationPlugin\u003e\n    --\u003e\n    \u003c!--\n    The Discarding DLQ plugin simplifies the configuration of your global dead-letter queue strategy.\n    You can take advantage of a more granular per-destination control by using destination policies.\n    For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html\n    --\u003e\n    \u003c!--\n    \u003cdiscardingDLQBrokerPlugin dropAll=\"true\" dropTemporaryQueues=\"true\" dropTemporaryTopics=\"true\"/\u003e\n    --\u003e\n    \u003c!--\n    The Force Persistency Mode plugin can override the persistency mode set on messages.\n    --\u003e\n    \u003c!--\n    \u003cforcePersistencyModeBrokerPlugin persistenceFlag=\"true\"/\u003e\n    --\u003e\n    \u003c!--\n    The Redelivery plugin extends the capabilities of destination policies with respect to message redelivery.\n    For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html\n    --\u003e\n    \u003c!--\n    \u003credeliveryPlugin fallbackToDeadLetter=\"true\" sendToDlqIfMaxRetriesExceeded=\"true\"\u003e\n      \u003credeliveryPolicyMap\u003e\n        \u003credeliveryPolicyMap\u003e\n          \u003credeliveryPolicyEntries\u003e\n            \u003credeliveryPolicy maximumRedeliveries=\"4\" queue=\"SpecialQueue\" redeliveryDelay=\"10000\"/\u003e\n          \u003c/redeliveryPolicyEntries\u003e\n          \u003cdefaultEntry\u003e\n            \u003credeliveryPolicy initialRedeliveryDelay=\"5000\" maximumRedeliveries=\"4\" redeliveryDelay=\"10000\"/\u003e\n          \u003c/defaultEntry\u003e\n        \u003c/redeliveryPolicyMap\u003e\n      \u003c/redeliveryPolicyMap\u003e\n    \u003c/redeliveryPlugin\u003e\n    --\u003e\n    \u003c!--\n    The Statistics plugin lets you query broker or destination statistics by sending messages to the broker.\n    For more information, see http://activemq.apache.org/statisticsplugin.html\n    --\u003e\n    \u003c!--\n    \u003cstatisticsBrokerPlugin/\u003e\n    --\u003e\n    \u003c!--\n    The Timestamping plugin lets the broker use server-side time instead of client-provided time for messages.\n    For more information, see http://activemq.apache.org/timestampplugin.html\n    --\u003e\n    \u003c!--\n    \u003ctimeStampingBrokerPlugin ttlCeiling=\"86400000\" zeroExpirationOverride=\"86400000\"/\u003e\n    --\u003e\n  \u003c/plugins\u003e\n  \u003c!--\n  Network connectors let you connect brokers into networks of brokers.\n  For more information, see Creating and Configuring an Amazon MQ Network of Brokers\n  (https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-creating-configuring-network-of-brokers.html)\n  in the Amazon MQ Developer Guide and also Networks of Brokers\n  (http://activemq.apache.org/networks-of-brokers.html) in the ActiveMQ documentation.\n  --\u003e\n  \u003c!--\n  \u003cnetworkConnectors\u003e\n    \u003cnetworkConnector name=\"myNetworkConnector\" userName=\"commonUser\" uri=\"masterslave:(ssl://b-1a2b3c4d-1.mq.region.amazonaws.com:61617,ssl://b-1a2b3c4d-2.mq.region.amazonaws.com:61617)\"/\u003e\n  \u003c/networkConnectors\u003e\n  --\u003e\n\u003c/broker\u003e\n",
            "description": "Symphony-Kansas-UAT-Configuration",
            "engine_type": "ActiveMQ",
            "engine_version": "5.15.9",
            "id": "c-27f88007-a62f-4053-81e6-79bc1fd68aff",
            "latest_revision": 2,
            "name": "amazonmq",
            "tags": {
              "Client": "Kansas",
              "Environment": "UAT",
              "Name": "Symphony-Kansas-UAT",
              "Project": "Symphony",
              "Zone": "Trused"
            }
          },
          "private": "bnVsbA=="
        }
      ]
    }
  ]
}
